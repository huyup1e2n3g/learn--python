以内建的sys模块为例，编写一个hello的模块：
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

' a test module '

__author__ = 'Michael Liao'

import sys

def test():
    args = sys.argv
    if len(args)==1:
        print('Hello, world!')
    elif len(args)==2:
        print('Hello, %s!' % args[1])
    else:
        print('Too many arguments!')

if __name__=='__main__':
    test()





For example, if the python interpreter is running that module (the source file) as the main program, 
it sets the special __name__ variable to have a value "__main__". 
If this file is being imported from another module, __name__ will be set to the module's name.
当模块是被调用执行的，取值为模块的名字；当模块是直接执行的，则该变量取值为：__main__




先编写一个测试模块atestmodule.py

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

' a test module '

def addFunc(a,b):  
    return a+b  

print('atestmodule计算结果:',addFunc(1,1))
再编写一个模块anothertestmodule.py来调用上面的模块：

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

' a test module '

import atestmodule

print('调用anothermodule模块执行的结果是：',atestmodule.addFunc(12,23))
在刚才两个模块的路径（我的路径为：“C:\work”）中打开cmd，用命令行运行atestmodule.py：

C:\work>python atestmodule.py
atestmodule计算结果: 2
在刚才两个模块的路径中打开，用命令行运行anothertestmodule.py：

C:\work>python anothertestmodule.py
atestmodule计算结果: 2
调用test模块执行的结果是： 35

#显然，当我运行anothertestmodule.py后第一句并不是调用者所需要的，为了解决这一问题，Python提供了一个系统变量：__name__

#注：name两边各有2个下划线__name__有2个取值：当模块是被调用执行的，取值为模块的名字；当模块是直接执行的，则该变量取值为：__main__
于是乎，被调用模块的测试代码就可以写在if语句里了，如下：

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

' a test module '

def addFunc(a,b):  
    return a+b  

if __name__ == '__main__':  
    print('atestmodule计算结果:',addFunc(1,1))
当再次运行atestmodule.py：

C:\work>python atestmodule.py
atestmodule计算结果: 2

#结果并没有改变，因为调用atestmodule.py时，__name__取值为__main__，if判断为真，所以就输出上面的结果
当再次运行atestmodule.py：

C:\work>python anothertestmodule.py
调用test模块执行的结果是： 35

#此时我们就得到了预期结果，不输出多余的结果。能实现这一点的主要原因在于当调用一个module时，
此时的__name__取值为模块的名字，所以if判断为假，不执行后续代码。
所以代码if name == 'main': 实现的功能就是Make a script both importable and executable，
也就是说可以让模块既可以导入到别的模块中用，另外该模块自己也可执行。




if __name__ == __main__   核心是在判断该程序文件是否作为主程序入口。
    如果在命令行直接调用该程序文件，该文件作为主程序入口，__name__ == __main__理所当然。
    如果在命令行调用其他程序文件，主程序入口__name__ == __main__自然不成立，因为main等于那个你在命令行输入的程序名。
    好处就是，别人调用时（你并非是主程序入口）后面的东西不运行，自己命令行执行时（你是主程序入口）后面的东西运行。故可以作为测试用。
